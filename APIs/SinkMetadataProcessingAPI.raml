#%RAML 1.0

title: Sink Metadata Processing
baseUri: http://api.example.com/x-nmos/sink-mp/{version}
version: v1.0
mediaType: application/json

/:
  displayName: Base
  get:
    description: List of resources available from this API - Inputs, Outputs, Senders, and Receivers. Each are compulsory parts of the spec.
    responses:
      200:
        body:
          example: !include ../examples/base-get-200.json
          type: !include schemas/sink-api-base.json
/senders:
  displayName: Senders
  get:
    description: Sender root
    responses:
      200:
        description: List Senders managed with IS-11. All UUIDs are appended with / to indicate that the ID forms part of the URL for the next layer down.
        body:
          example: !include ../examples/resourcelist-get-200.json
          type: !include schemas/resource-list.json
  /{senderId}:
    get:
      description: List all the API endpoints for a single sender.
      responses:
        200:
          description: Returned when success.
          body:
            example: !include ../examples/sender-get-200.json
            type: !include schemas/sender-base.json
        404:
          description: Returned when the requested Sender ID does not exist.
    /inputs:
      get:
        description: List of Inputs associated with the Sender.
        responses:
          200:
            description: Returned when success.
            body:
              example: !include ../examples/uuidlist-get-200.json
              type: !include schemas/uuid-list.json
          404:
            description: Returned when the requested Sender ID does not exist.
            body:
              type: !include schemas/error.json
    /constraints:
      get:
        description: Constraints root
        responses:
          200:
            description: Returned when success.
            body:
              example: !include ../examples/constraints-get-200.json
              type: !include schemas/constraints-base.json
      /active:
        get:
          description: Show the last applied Constraints.
          responses:
            200:
              body:
                example: !include ../examples/constraints-active-get-200.json
                type: !include schemas/constraints_active.json
            205:
              description: Denotes an external change occurred which led to the current Constraints violation.
            404:
              description: Returned when the requested Sender ID does not exist.
              body:
                type: !include schemas/error.json
        put:
          description: Replace previous Constraints with new ones.
          body:
            example: !include ../examples/constraints-active-get-200.json
            type: !include schemas/constraints_active.json
          responses:
            200:
              description: Returns when success.
              body:
                example: !include ../examples/constraints-active-get-200.json
                type: !include schemas/constraints_active.json
            400:
              description: >
                Returned when the Constraints are rejected due to schema validation failure or if the Sender doesn't support Parameter Constraints used.
              body:
                type: !include schemas/error.json
            404:
              description: Returned when the requested Sender ID does not exist.
              body:
                type: !include schemas/error.json
            422:
              description: >
                Returned when the Sender isn't capable to adhere to the Constraints although the request is valid and the Sender supports all the Parameter Constraints used.
              body:
                type: !include schemas/error.json
            423:
              description: >
                Returned when the Constraints can't be applied temporarily due to Device restrictions (e.g. if the Sender is active).
              body:
                type: !include schemas/error.json
            500:
              description: >
                Returned if the Constraints can't be applied due to a reason which is not related to a violation of schema.
              body:
                type: !include schemas/error.json
        delete:
          description: Delete the active Constraints.
          responses:
            200:
              description: Returns when success.
              body:
                example: !include ../examples/empty-constraints-active-get-200.json
                type: !include schemas/empty_constraints_active.json
            404:
              description: Returned when the requested Sender ID does not exist.
              body:
                type: !include schemas/error.json
            423:
              description: >
                Returned when the Constraints can't be applied temporarily due to Device restrictions (e.g. if the Sender is active).
              body:
                type: !include schemas/error.json
            500:
              description: >
                Returned if the Constraints can't be deleted due to a reason which is not related to a violation of schema.
              body:
                type: !include schemas/error.json
      /supported:
        get:
          description: Lists Constraints supported by the Sender
          responses:
            200:
              description: Returned when success.
              body:
                example: !include ../examples/constraints-supported-get-200.json
                type: !include schemas/constraints_supported.json
/receivers:
  displayName: Receivers
  get:
    description: List Receivers managed with IS-11. All UUIDs are appended with / to indicate that the ID forms part of the URL for the next layer down.
    responses:
      200:
        body:
          example: !include ../examples/resourcelist-get-200.json
          type: !include schemas/resource-list.json
  /{receiverId}:
    get:
      description: List all the API endpoints for a single receiver.
      responses:
        200:
          description: Returned when success.
          body:
            example: !include ../examples/receiver-get-200.json
            type: !include schemas/receiver-base.json
        404:
          description: Returned when the requested Receiver ID does not exist.
          body:
            type: !include schemas/error.json
    /outputs:
      get:
        responses:
          200:
            description: List of Outputs associated with the Receiver.
            body:
              example: !include ../examples/uuidlist-get-200.json
              type: !include schemas/uuid-list.json
          404:
            description: Returned when the requested Receiver ID does not exist.
            body:
              type: !include schemas/error.json
/inputs:
  displayName: Inputs
  get:
    responses:
      200:
        description: List of Inputs.  All UUIDs are appended with / to indicate that the ID forms part of the URL for the next layer down.
        body:
          example: !include ../examples/resourcelist-get-200.json
          type: !include schemas/resource-list.json
  /{inputId}:
    get:
      description: List all the API endpoints for a single Input.
      responses:
        200:
          description: Returned when success.
          body:
            example: !include ../examples/input-output-get-200.json
            type: !include schemas/input-output-base.json
        404:
          description: Returned when the requested Input ID does not exist.
          body:
            type: !include schemas/error.json
    /properties:
      get:
        description: Return properties of the Input.
        responses:
          200:
            description: Returned when success.
            body:
              example: !include ../examples/input-properties-get-200.json
              type: !include schemas/input.json
          404:
            description: Returned when the requested Input ID does not exist.
            body:
              type: !include schemas/error.json
    /edid:
      get:
        description: >
          Redirects to the location of the effective EDID file or returns the effective EDID file directly.
          Check HTTP response code to determine which mode of operation is in use. When returning the effective EDID file
          directly ensure that the `Content-Type` entity header is correctly set.
        responses:
          200:
            description: The effective EDID file itself will be served
            body:
              application/octet-stream:
                type: file
          307:
            description: A temporary redirect to the effective EDID file
          404:
            description: >
              Returned when the effective EDID file or the requested Input ID doesn't exist.
/outputs:
  displayName: Outputs
  get:
    responses:
      200:
        description: List of Outputs. All UUIDs are appended with / to indicate that the ID forms part of the URL for the next layer down.
        body:
          example: !include ../examples/resourcelist-get-200.json
          type: !include schemas/resource-list.json
  /{outputId}:
    get:
      description: List all the API endpoints for a single Output.
      responses:
        200:
          description: Returned when success.
          body:
            example: !include ../examples/input-output-get-200.json
            type: !include schemas/input-output-base.json
        404:
          description: Returned when the requested Output ID does not exist.
    /properties:
      get:
        description: Return properties of the Output.
        responses:
          200:
            description: Returned when success.
            body:
              example: !include ../examples/output-properties-get-200.json
              type: !include schemas/output.json
          404:
            description: Returned when the requested Output ID does not exist.
            body:
              type: !include schemas/error.json
    /edid:
      get:
        description: >
          Redirects to the location of the EDID file or returns the EDID file directly.
          Check HTTP response code to determine which mode of operation is in use. When returning the EDID file
          directly ensure that the `Content-Type` entity header is correctly set.
        responses:
          200:
            description: The EDID file itself will be served
            body:
              application/octet-stream:
                type: file
          307:
            description: A temporary redirect to the EDID file.
          404:
            description: >
              Returned when the EDID file or the requested Output ID doesn't exist.
            body:
              type: !include schemas/error.json
